https://petstore.swagger.io/#/user

1) POST /user
2) GET /user/username
3) PUT /user/username
4) DELETE /user/username
5) GET /user/login
6) GET /user/logout

GET - retrieve information on collection or it's object
PUT - changing information on collection or object
POST - creates collection or object
DELETE - deletes collection or object

CRUD
create - POST
read - GET
update - PUT
delete - DELETE

two teams
1) class which make requests to /user endpoint
2) supports 6 requests
3) spec to check flow create user - login - get user - update user - logout - delete
3.1) post request to create user
- check status code
- login
- get user returns created user

faraday gem
https://lostisland.github.io/faraday/

gem install faraday
OR
bundle install with latest changes

require 'faraday'

class ApiClient
  def initialize
    #sets connection if u want
  end

  def get_user(username)
    response = Faraday.get("https://petstore.swagger.io/v2/user/#{username}", {"accept" => "application/json"})
  end

  def create_user
  # makes post to users with body
  end
end

1) POST /user - valid checks   -->  Kovryha Danylo
- with each parameter valid (id, username, parameter length, special symbols... think of testing a string)
2) POST /user invalid checks   -->  Zinovieva Vika
- with each parameter invalid (id, username, parameter length, special symbols... think of testing a string)
3) GET /user/username - valid and invalid checks  --> Bielenova Kateryna
- parameter username passed to enpoint can be valid and invalid(existing, not-existing, too long...)
4) PUT /user/username - valid checks  --> Khukhrianskyi Andrew
- with each parameter valid (id, username, parameter length, special symbols... think of testing a string)
5) PUT /user/username - invalid checks  --> Kytaihora Volodymyr
- with each parameter valid (id, username, parameter length, special symbols... think of testing a string)
6) DELETE /user/username - valid and invalid checks  --> Bielik Viktoriia
- parameter username passed to enpoint can be valid and invalid(existing, not-existing, too long...)
7) GET /user/login - valid-invalid checks   -->  Tambovtsev Serhii
- user logs in;
- one user is logged in, another tries to login while previous isn't logged out
- same user tries to log in two times in row
- login - logout - login
- ...
8) GET /user/logout - valid-invalid checks   --> Politikova Anna
- user logs out;
- same user tries to log out two times in row
- login - logout - login - logout
- ...


