require_relative '../spec_helper'
require_relative 'api_client.rb'
require 'securerandom'

RSpec.describe 'Create -> Login -> Get' do

  app_client = ApiClient.new
  body = app_client.generate_random_body
  invalid_body =
    {
      "id": "Artem",
      "username": "user_Lavrinenko$$",
      "firstName": "Olegovich",
      "lastName": "Lavash",
      "email": "artemiy%.com",
      "password": "000",
      "phone": 1234,
      "userStatus": -1
    }

  before(:all) { app_client.login_as_default_user }


  context 'Verify that creation with invalid credentials is impossible ' do

    it 'Creation with ALL invalid credentials is impossible' do
    response = app_client.create_user(invalid_body)
     expect(response.status).to eq(500)
    end

    it 'Creation with invalid ID is impossible' do
      invalid_id = SecureRandom.base64
      body = app_client.adjust_body(id: invalid_id)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid ID is impossible' do
      invalid_id = '   '
      body = app_client.adjust_body(id: invalid_id)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid ID is impossible' do
      invalid_id = '*_*'
      body = app_client.adjust_body(id: invalid_id)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid ID is impossible' do
      invalid_id = 'rand(1000.0)'
      body = app_client.adjust_body(id: invalid_id)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid ID is impossible' do
      invalid_id = 'rand(-100.0)'
      body = app_client.adjust_body(id: invalid_id)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end


    it 'Creation with invalid username is impossible' do
      invalid_username = '     '
      body = app_client.adjust_body(username: invalid_username)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid username is impossible' do
      invalid_username = 'elizabeth'
      body = app_client.adjust_body(username: invalid_username)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid username is impossible' do
      invalid_username = '$_$'
      body = app_client.adjust_body(username: invalid_username)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid username is impossible' do
      invalid_username = SecureRandom.hex.size(rand(1))
      body = app_client.adjust_body(username: invalid_username)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid FirstName is impossible' do
      invalid_firstname = '   '
      response = app_client.create_user(body)
      body = app_client.adjust_body(username: invalid_firstname)
      expect(response.status).to eq(500)
    end

    it 'Creation with only invalid FirstName is impossible' do
      invalid_firstname = 'rand(1000)'
      response = app_client.create_user(body)
      body = app_client.adjust_body(username: invalid_firstname)
      expect(response.status).to eq(500)
    end

    it 'Creation with only invalid FirstName is impossible' do
      invalid_firstname = 'rand(1000.9)'
      response = app_client.create_user(body)
      body = app_client.adjust_body(username: invalid_firstname)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid FirstName is impossible' do
      invalid_firstname = SecureRandom.hex.size(rand(35000))
      response = app_client.create_user(body)
      body = app_client.adjust_body(username: invalid_firstname)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid LastName is impossible' do
      invalid_lastname = SecureRandom.random_number(100)
      body = app_client.adjust_body(username: invalid_lastname)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid LastName is impossible' do
      invalid_lastname = ''
      body = app_client.adjust_body(username: invalid_lastname)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Email is impossible' do
      invalid_email = SecureRandom.hex
      body = app_client.adjust_body(username: invalid_email)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Email is impossible' do
      invalid_email = '@gmail.com'
      body = app_client.adjust_body(username: invalid_email)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Email is impossible' do
      invalid_email = ''
      body = app_client.adjust_body(username: invalid_email)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Password (length more than 50 symb) is impossible' do
      invalid_pass = SecureRandom.hex.size(51..1000)
      body = app_client.adjust_body(username: invalid_pass)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Password (length less than 8 symb)  is impossible' do
      invalid_pass = SecureRandom.hex.size(0..7)
      body = app_client.adjust_body(username: invalid_pass)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid Phone is impossible' do
      invalid_phone = SecureRandom.hex
      body = app_client.adjust_body(username: invalid_phone)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end

    it 'Creation with invalid  UserStatus is impossible' do
      invalid_userStatus = SecureRandom.hex
      body = app_client.adjust_body(username: invalid_userStatus)
      response = app_client.create_user(body)
      expect(response.status).to eq(500)
    end
  end
  end
